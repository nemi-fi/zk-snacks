{
  "transpiled": true,
  "noir_version": "1.0.0-beta.4+0000000000000000000000000000000000000000",
  "name": "NFT",
  "functions": [
    {
      "name": "private_get_symbol",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18192277837884173995": {
            "error_kind": "string",
            "string": "Function private_get_symbol can only be called statically"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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ECJkQgohQaalXmS+sExIIUTIhBRChExIIUTIRJBJgkxIIUTIhBRChExIIUTIhBRChExIISTIFJBCiJAJKYQImZBCiJAJKYQImQgySZAJKYQImZBCiJAJKYQImZBCiJAJKYQEmSJSCBEyIYUQIRNSCBEyIYUQIRNBJgkyIYUQIRNSCBEyIYUQIRNSCBEyIYWQIFNCCiFCJqQQImRCCiFCJqQQImQiyCRBJqQQImRCCiFCJqQQImRCCiFCJqQQEmTKSCFEyIQUQoRMSCFEyIQUQoRMBJkkyIQUQoRMSCFEyIQUQoRMSCFEyIQUQoBMtCGFECETUggRMiGFECETUggRMhFkkiATUggRMiGFECETUggRMiGFECETUggJMhmkECJkQgohQiakECJkQgohQiaCTBJkQgohQiakECJkQgohQiakECJkQgohQSaLFEKETEghRMiEFEKETEghRMhEkEmCTEghRMiEFEKETEghRMiEFEKETEghJMjkkEKIkAkphAiZkEKIkAkphAiZCDJJkAkphAiZkEJcJJMlfyBMNZkoHzL5bcuvMiGFECETUggRMiGFkCATIYUQIRNSCBEyIYUQIRNSCBEyEWSSIBNSCBEyIYUQIRNSCBEyIYUQIRNSCAkyeaQQImRCCiFCJqQQImRCCiFCJoJMEmRCCiFCJqQQImRCCiFCJqQQImRCCiFBpoAUQoRMSCFEyIQUQoRMSCFEyESQSYJMSCFEyIQUQoRMSCFEyIQUQoRMSCEkyBSRQoiQCSmECJmQQoiQCSmECJkIMkmQCSmECJmQQoiQCSmECJmQQoiQCSmEBJkSUggRMiGFECETUggRMiGFECETQSYJMiGFECETUggRMiGFECETUggRMiGFkCBTRgohQiakECJkQgohQiakECJkIsgkQSakECJkQgohQiakECJkQgohQiakEAJkuv03yCRBJqQQImRCCiFCJqQQImQiyCRBJqQQImRCCiFCJqQQImRCCiFCJqQQEmQySCFEyIQUQoRMSCFEyIQUQoRMBJkkyIQUQoRMSCFEyIQUQoRMSCFEyIQUQoJMFimECJmQQoiQCSmECJmQQoiQiSCTBJmQQoiQCSmECJmQQoiQCSmECJmQQkiQySGFECETUggRMiGFECETUggRMhFkkiATUggRMiGFECETUggRMiGFECETUggJMhFSCBEyIYUQ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",
      "brillig_names": [
        "discover_new_messages",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "private_get_name",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2111772463301017956": {
            "error_kind": "string",
            "string": "Function private_get_name can only be called statically"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "_finalize_transfer_to_private_unsafe",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "partial_note",
            "type": {
              "kind": "struct",
              "path": "types::nft_note::PartialNFTNote",
              "fields": [
                {
                  "name": "commitment",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5527120278801020911": {
            "error_kind": "string",
            "string": "invalid NFT owner"
          },
          "9171385800979035582": {
            "error_kind": "string",
            "string": "Invalid partial note"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17028138060491915576": {
            "error_kind": "string",
            "string": "Function _finalize_transfer_to_private_unsafe can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17922298012674089187": {
            "error_kind": "string",
            "string": "Cannot complete a PartialNFTNote with a value of 0"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "_finalize_transfer_to_private_unsafe"
      ]
    },
    {
      "name": "public_get_symbol",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "compressed_string::field_compressed_string::FieldCompressedString",
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "15009911310769716579": {
            "error_kind": "string",
            "string": "Function public_get_symbol can only be called statically"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHxgAAgABgEQlAAAARSUAAABGLgQAAYBEKAIAAgSARCcCAwQBOw0AAgADJiUAAACSHgIAAQAeAgACADM4AAEAAgADJwIBAQEkAgADAAAAbyUAAAC7HgIAAQknAgIAAQo4AQIDJAIAAwAAAIslAAAAzS8MAAIAASYoAIAEBHgADQAAAIAEgAMkAIADAAAAuioBAAEF96Hzr6Wt1Mo8AQECJioBAAEFvh4//z6k9vo8AQECJioBAAEF0E3qz6yL/WM8AQECJg==",
      "debug_symbols": "vZXbisIwEIbfJde9yMxkcvBVlkWqRimUVmpdWMR330Satrphu4h4Uzrlm/6TOWQuYuc358O6avbtSaw+LqJut2VftU2wLtdCbLqqrqvDev5ZyPgwfONPx7KJ5qkvu16sgJBlIXyzi+9kOfxjX9U+WFJfi9+8REy4VDijKUMrrWGglTZypA1kYMuSB9gywhz+LISVrwnfuYQDuDeG/6Lssx2zb5eyD2xMojXR3+E7dumsTpN6CN/Rq8MHvA8/itg3iASnd6gAZFUwdEZyQ1a0oGJCvw64CfxCBVGn0XRo+aGCAPo/Ed2fO/ohPOn3pB6pJ/1czi+UUg9upOTkxTKTQdKYRpi0tZOEyY4XmvEuQTfdJZgdRsNWpVJquVBKQ5YSrGbdlYUByOixF5V0d5W/Buur7KpyU/thR+zPzXa2Mvrvo3/YHseu3frdufNxj0wrBOIdjKYgvDVUMIgK4qARdH4A",
      "brillig_names": [
        "public_get_symbol"
      ]
    },
    {
      "name": "get_private_nfts",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "owner",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "page_index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "tuple",
            "fields": [
              {
                "kind": "array",
                "length": 10,
                "type": {
                  "kind": "field"
                }
              },
              {
                "kind": "boolean"
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_private_nfts"
      ]
    },
    {
      "name": "_finish_transfer_to_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7176719043052132708": {
            "error_kind": "string",
            "string": "Function _finish_transfer_to_public can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBKJwAABAMnAgMEAicCBAQAHxgABAADgEguCIBIAAEuCIBJAAIlAAAASyUAAABvKAIAAQSASicCAgQAOw0AAQACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgEAASgAgEcEAAEmJQAAAmUeAgADAB4CAAQAMzgAAwAEAAUkAgAFAAAAkyUAAAKOHgIAAwEeAgAEAAo4AwQFJAIABQAAAK8lAAACoCcCAwAALQgBBCcCBQQEABABBQEnAwQEAQAoBAIFLQwFBi0OAwYAKAYCBi0OAwYAKAYCBi0OAwYtDQQFACgFAgUtDgUEKwIABQAAAAAAAAAAAgAAAAAAAAAALQgBBicCBwQFABABBwEnAwYEAQAoBgIHLQwHCC0OAwgAKAgCCC0OAwgAKAgCCC0OAwgAKAgCCC0OBQgtDQQFACgFAgUtDgUELQ0GBQAoBQIFLQ4FBi0IAQUAAAECAS0OBAUtCAEEAAABAgEtDgYELQgBBgAAAQIBLgqARQAGLQgBBwAAAQIBLgqARAAHJwIIAAcnAgkECi0IAAotDAULLQwEDC0MBg0tDAcOLQwIDwAQAAkAJQAAArItBAAAJwIIBAktCAAJLQwFCi0MBAstDAYMLQwHDS0MAg4AEAAIACUAAAKyLQQAAC0NBwILKAACgEQACCQCAAgAAAINJwIJBAA8CQEJJwICBAgtCAAILQwFCS0MBAotDAYLLQwHDAAQAAIAJQAAA9stBAAALQ0EAgEoAAKARwAFLQ0FBAo4BAMCCygAAoBEAAMkAgADAAACXiUAAATuMAwAAQAEJigAgAQEeAANAAAAgASAAyQAgAMAAAKNKgEAAQX3ofOvpa3UyjwBAQImKgEAAQW+Hj//PqT2+jwBAQImKgEAAQVjmNPyHedZZDwBAQImJQAAAmUtDQMGLQ0EBwsoAAeARAAIJAIACAAAAtgnAgkEADwJAQkLKAAGgEMAByQCAAcAAANnIwAAAu0tDQEGLQ0CBy0NAwgtDQQJDSgACIBDAAokAgAKAAADEiUAAAUALgQABoADKACABAQABCUAAAUSLgiABQAKACgKAgsAOAsIDC0OBQwBKAAIgEcABQ44CAUGJAIABgAAA1IlAAAFoC0OCgEtDgcCLQ4FAy0OCQQjAAAD2icCBgQHLQgABy0MAQgtDAIJLQwDCi0MBAsAEAAGACUAAAPbLQQAAC0NAQYtDQIHLQ0ECC4EAAaAAygAgAQEAAQlAAAFEi4IgAUACQAoCQIKASgACoBFAAstDgULLQ4JAS0OBwIuCoBHAAMtDggEIwAAA9omJQAAAmUuCIBFAAUjAAAD6w0oAAWAQwAGJAIABgAABFsjAAAEAC0NAQUtDQIGLQ0DBy0NBAgnAgkEBC0IAQonAgsEBQAQAQsBJwMKBAEAKAYCCycCDAQEACgKAg0/DwALAA0tDQoGACgGAgYtDgYKLQ4FAS0OCgItDgcDLQ4IBCYtDQMGDDgFBgcBKAAFgEcABiQCAAcAAAR5IwAABOUtDQEHLQ0CCC0NAwktDQQKACgIAgwAOAwFDS0NDQsAKAcCDQA4DQUOLQ0ODAA4CwwNLgQACIADKACABAQABSUAAAUSLgiABQALACgLAgwAOAwFDi0ODQ4tDgcBLQ4LAi0OCQMtDgoEIwAABOUtDAYFIwAAA+sqAQABBQLcbieAdhKdPAEBAiYqAQABBcVrxFoOEAACPAEBAiYuAYADgAYLAIAGAAKAByQAgAcAAAUtIwAABTguAIADgAUjAAAFny4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAWLLgGACoAILgKACIALAQCACgACgAoBAIALAAKACyMAAAVaKAGABQQAAQMAgAYAAoAGIwAABZ8mKgEAAQVFp8pxGUHkFTwBAQIm",
      "debug_symbols": "7Z3bbuM4DIbfJde9EKkDpXmVwaJoO5kiQJAUabvAoui7r9OpHCemrJrKzmJg3hTjMX9T/kyJEh3bb6sf6/vXx9vN7uf+efXt+9tqu3+4e9nsd93W2/vN6v6w2W43j7fD/16Z4x+A8CF4frrbHbefX+4OL6tvYNGbm9V69+P4bxt9d5Cfm+262zLh/WZsbxCzuXE4sLaMtQsBPq1dINNbEzDG0Rv/aRw9wtD4r5sVIFyn/Sllc4D0O9t/Jf4+9vxjjT94omwdrJ1uf/Ipn2wK1l2237prtx/wvP1HLw5/ixdivUBKvQwNhIoXF63L0REHfaEQHYR9dES6pOv588ZBd8Pz/hb+43j1X2Hk3FmLjrqAMh0Zoc7zOqTQh4A1JxbesAET7GlYOHUUCJ7tVvnQ3fXpbS0SY0vJZcqU0unImLh2WMph7gY9EDlTRMgHRhz0bdbYuzwOeBeHpkeC0SjBRoJOCTYSTEqwjWDSGGwlqDHYRrDLz0qwkWBUgm0EAZVgI0FSgm0EC7UKJfh1gkEJthG0uqr7AsGY6yV+UEzLBJ0SbCSoM+pGgs4qwSrB0NuGc9MjwaC9uJWgrkkaCZL24laCGoONBKPGYCtBjcFGgklrM60EdV3cRtAarc20EtQ77o0EQWszrQSdEmwkqLWZRoKoM+pLgh9Y9PYRh8Xq3JfFohNaDovTGQKLRaeeLBbN5RwWrwmaxaJ1LA5L0ATNYtEEzWEhLSOxWDRBs1g0QXNY9LkJFkvSyT+LRaOFxaJjC4PFLfYuhYXcZLQYLrEs9tZDBYtGC4tlqWPLNJbFVv4rWJZa+Z/GYpe6VKxg0SGXxaJDLofFOcXCYdFo4bAstvJfwbLUyv80lsVW/itYllr5n8ZCuoJmsWiCZrHokMthiTrkslh0Bc1hWexzIxUsS03Q5LItkpcbdwy9WWo2n8MQQsxvugQyOGK41Bx3RYagfbmZ4WJfu3NNhkutys5iSKl/r3KEy7zsF/vqnWsydMqwmaHm5WaGbqlLj2sy1LlNM0OvOaWdoc5tmhkGjcN2hk4ZNjPUuc0XGCbbn19yI4akebmZ4XU+ngHx9JET5ysMvU+5+SHi8IsoiaPYfxKG6PSSWCD3q/n+j25+sn9y88N13kX0/zX/K+PHYOjmm+9M9gEO6czJ2Doam48djT81if3CEUWbP/ZFMZlpYwAXfd9sP7jb8uuDSCHxXcX0YwmYmC6Gh1B4OGNSRKYQ1b4v3AFdFu4IQCJKAhE6iaiQr2MfKmhGIAq/bnM4iJiRp8JvvyoiEogCSEReICLJOUVJ8yLfp73rL64nuBQV7s9WRGm+KBonEBWeeamIvECEEk+F/tQltywKcPl4Uyy8TqYiIoGo8M6NaVGhXFERSUAUftM4LQoSeoVHvu1pfmg9jkRBICpMKisiJxFFgajQ3SsiAYhkQCKSeAIjETmJSIA8YQF56Kd+NsJIFAWiwmMZ06LC64oqoiAQeZCIkkAUBDk3BcE8IhFIRAJPYPipJYU8HaXgRho+P6V+2Z8ojDVxvoZPaRVNmK8pBOvknLzb60WqJFEVEmFNJfIVRL6CyBeJfJHIVxRdryjylUTnlaJA1XUtkSpIVGBEKj97jAF+IZowr8iTG2sE4xLwvXjajxO0jV+EVjQ0X8MvQacZhPljJpDAD/8uoBRzHJzVdD81/My3opH4SZXzYTRpfrwh//PSiobmawAFmvk5Gvkn3ysagR/BXAAFcwF0guvjZsbBe7f1991hc3e/XT93iuPO193Dy2a/+9x8+ecp77k/bLbbzePt02H/sP7xeljfbvcPx30r8/nnO3aFtu6+xUcO6Ta7C3kDGD5C9Li3K74ixc5r5/lf",
      "brillig_names": [
        "_finish_transfer_to_public"
      ]
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [
        "aztec::macros::functions::utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "sync_notes"
      ]
    },
    {
      "name": "nft_exists",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2952119842017946896": {
            "error_kind": "string",
            "string": "Function nft_exists can only be called statically"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBKJwAABAMnAgIEAScCAwQAHxgAAwACgEguCIBIAAElAAAASyUAAABvLgQAAYBJKAIAAgSASScCAwQBOw0AAgADKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgEAASgAgEcEAAEmJQAAAnQeAgACAB4CAAMAMzgAAgADAAQkAgAEAAAAkyUAAAKdHgIAAgknAgMAAQo4AgMEJAIABAAAAK8lAAACrycCAgAALQgBAycCBAQEABABBAEnAwMEAQAoAwIELQwEBS0OAgUAKAUCBS0OAgUAKAUCBS0OAgUtDQMEACgEAgQtDgQDKwIABAAAAAAAAAAAAgAAAAAAAAAALQgBBScCBgQFABABBgEnAwUEAQAoBQIGLQwGBy0OAgcAKAcCBy0OAgcAKAcCBy0OAgcAKAcCBy0OBActDQMEACgEAgQtDgQDLQ0FBAAoBAIELQ4EBS0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgqARQAFLQgBBgAAAQIBLgqARAAGJwIHAAYnAggECS0IAAktDAQKLQwDCy0MBQwtDAYNLQwHDgAQAAgAJQAAAsEtBAAAJwIHBAgtCAAILQwECS0MAwotDAULLQwGDC0MAQ0AEAAHACUAAALBLQQAAC0NBgELKAABgEQAByQCAAcAAAINJwIIBAA8CQEIJwIBBActCAAHLQwECC0MAwktDAUKLQwGCwAQAAEAJQAAA+otBAAALQ0DAQEoAAGARwAELQ0EAwo4AwIBCygAAYBEAAIkAgACAAACXiUAAAT9LwwAAwABHAwBAwEcDAMCABwMAgEBJigAgAQEeAANAAAAgASAAyQAgAMAAAKcKgEAAQX3ofOvpa3UyjwBAQImKgEAAQW+Hj//PqT2+jwBAQImKgEAAQUo+Ala9dytEDwBAQImJQAAAnQtDQMGLQ0EBwsoAAeARAAIJAIACAAAAucnAgkEADwJAQkLKAAGgEMAByQCAAcAAAN2IwAAAvwtDQEGLQ0CBy0NAwgtDQQJDSgACIBDAAokAgAKAAADISUAAAUPLgQABoADKACABAQABCUAAAUhLgiABQAKACgKAgsAOAsIDC0OBQwBKAAIgEcABQ44CAUGJAIABgAAA2ElAAAFry0OCgEtDgcCLQ4FAy0OCQQjAAAD6ScCBgQHLQgABy0MAQgtDAIJLQwDCi0MBAsAEAAGACUAAAPqLQQAAC0NAQYtDQIHLQ0ECC4EAAaAAygAgAQEAAQlAAAFIS4IgAUACQAoCQIKASgACoBFAAstDgULLQ4JAS0OBwIuCoBHAAMtDggEIwAAA+kmJQAAAnQuCIBFAAUjAAAD+g0oAAWAQwAGJAIABgAABGojAAAEDy0NAQUtDQIGLQ0DBy0NBAgnAgkEBC0IAQonAgsEBQAQAQsBJwMKBAEAKAYCCycCDAQEACgKAg0/DwALAA0tDQoGACgGAgYtDgYKLQ4FAS0OCgItDgcDLQ4IBCYtDQMGDDgFBgcBKAAFgEcABiQCAAcAAASIIwAABPQtDQEHLQ0CCC0NAwktDQQKACgIAgwAOAwFDS0NDQsAKAcCDQA4DQUOLQ0ODAA4CwwNLgQACIADKACABAQABSUAAAUhLgiABQALACgLAgwAOAwFDi0ODQ4tDgcBLQ4LAi0OCQMtDgoEIwAABPQtDAYFIwAAA/oqAQABBQLcbieAdhKdPAEBAiYqAQABBcVrxFoOEAACPAEBAiYuAYADgAYLAIAGAAKAByQAgAcAAAU8IwAABUcuAIADgAUjAAAFri4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAWaLgGACoAILgKACIALAQCACgACgAoBAIALAAKACyMAAAVpKAGABQQAAQMAgAYAAoAGIwAABa4mKgEAAQVFp8pxGUHkFTwBAQIm",
      "debug_symbols": "7Z3dbuI6EMffhWsu7PHH2Psqq6OqH2yFhKCi9EhHVd/9BBYnAcYxGUe7qjI3VVPmj8e/2B570tifi5fV08frw3r7a/e++PHzc7HZPT8e1rttc/X5tVw87debzfr1of/nhTr+0NqfBO9vj9vj9fvhcX9Y/NAGnFouVtuX4+8muOZLfq03q+ZK+a/lrb0CSObKQs/aENbWe322th5Va42aMA5OubNxcKD7xv8sFxr0NP7HmMy1jn/S/4n4u9DyDyX+2iEma2/MsP/RxVTZ6I299t/Yqf3XcOn/sRQLf6QUJEuB5rYlGThrCqVg05jO5tjYF+iCTx0nQnDXdB3c49FlvU865Ok8szxUTJ0jdRrRtjcKY6dziryt3nSdt3d7vCMbvz8bg+qagAGkbmW0qe9ijN03Q6T8MJgao+31E6BMAXT6YoBeDySNnU291dnQNz0SDEoIVhK0QrCSYBSCdQSjtMFagtIG6wiCkjZYSzAIwTqCGoRgJUEUgnUEMxkFIXg/QS8E6wgaWdXdQTCk5ILrpbwSQSsEKwnKjLqSoDVCsEjQt7b+0vRI0EsvriUoa5JKgii9uJagtMFKgkHaYC1BaYOVBKPkZmoJyrq4jqBRkpupJShP3CsJasnN1BK0QrCSoORmKgmCzKivCZ6wyOMjCouRuS+JRSa0FBYrMwQSi0w9SSwSyyksTgI0iUXyWBQWLwGaxCIBmsKCkkYisUiAJrFIgKawyHsTJJYok38Si7QWEouMLQQWO9unFEYnl8GAv8Yy20cPBSzSWkgscx1bhrHMNvNfwDLXzP8wFjPXpWIBiwy5JBYZciks1goWCou0FgrLbDP/BSxzzfwPY5lt5r+AZa6Z/2EsKCtoEosEaBKLDLkUliBDLolFVtAUltm+N1LAMtcAjTbZAjq+ccPQqblG8zEMtQ8tDVRww3CuMW5Chlr6cjXD2W67MyXDuWZlRzHE2O5+HPR1XHaz3XpnSoZWGFYzlLhczdDOdekxJUOZ21QzdBJT6hnK3KaaoZd2WM/QCsNqhjK3uYNhNG39or1hiBKXqxlOc3iGDu2pMtA/44Rk6FxM7vsAnftaRYpie9AQYrdJrEb72333rd2P5ju776fZi+jvuX/H+BG0Krnf9vJGqS4KIRxybfYKveoqS56MhCakrou2d1gTadyMXehbR6yKffNjbe/ZWH7y2mJXW1DDFXCYjoFyoXPeNC3i5D1+Z+/hO7PHzDsXqo1CWvVUvwMLZnY4KogysyLXG0+uU76Y22t9UJTLzw2LIkOU2wI5tL0V1A2IzBTbdoeJ9QeEJAoMEQJH5BmizFSjIOLUKTLcC5lg5mx7cx3qGxEyRJmuURBFhijzNGRYlEn/F0SskjJ1iu2M1evrF+NC5ojCYVHmFMFhUSZXUBA5jogDIrMrc0HEoRcyJ3R2KwvjbvpT1ByR44jieFFUhiNChkhrjoiBPAKnJHAcEQe54SA3GeS+XTSYcD2wxEzMHRZlUtQFkWOIvOaIPEOU+a/WgogRc2MAjogRqGNklKQVPbVsFmHtJNneaOj4FNuEUUR/o6GbXkGD4zVOMzRu/Jy8yY8plsqyVJGjQlZZyCorsMoKrLIipyytFEvFK4tTryZVwVIhR5WJiSUVp6doeuY8OMZkTg9vonLqx5bQjB+XNN2Lh8vxDN/oReiwhl6DFjR+PIOgGRpGOfQGODGkdnDxNCBp3GgNKMXQ2EJ9KM349gb0jhTDGjpNVtCMj51gDEMTxmsYcwFgzAWAMRcAx7g/bmQ7+Gqu/n3crx+fNqv3RnH88GP7fFjvtufLw39v6ZOn/XqzWb8+vO13z6uXj/3qYbN7Pn62UOcfP8HhEjCcYmNz2cBaaoin7nP8FOMSgm5KbUr+Hw==",
      "brillig_names": [
        "nft_exists"
      ]
    },
    {
      "name": "transfer_to_public",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "length": 17,
            "item_types": []
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "4718290446670665014": {
            "error_kind": "string",
            "string": "NFT not found when transferring to public"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "11873158822563704285": {
            "error_kind": "string",
            "string": "Mismatch return note field."
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "notify_created_nullifier_oracle_wrapper",
        "get_notes_internal",
        "get_collapse_hints",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "get_public_keys_and_partial_address",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "transfer_to_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "random",
        "decompose_hint",
        "lte_hint",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_to_radix",
        "directive_integer_quotient"
      ],
      "verification_key": "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"
    },
    {
      "name": "mint_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6515419266667913063": {
            "error_kind": "string",
            "string": "zero token ID not supported"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "random",
        "notify_created_note_oracle_wrapper",
        "decompose_hint",
        "lte_hint",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "directive_invert",
        "directive_to_radix",
        "directive_integer_quotient"
      ],
      "verification_key": "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"
    },
    {
      "name": "finalize_transfer_to_private",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "partial_note",
            "type": {
              "kind": "struct",
              "path": "types::nft_note::PartialNFTNote",
              "fields": [
                {
                  "name": "commitment",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5527120278801020911": {
            "error_kind": "string",
            "string": "invalid NFT owner"
          },
          "9171385800979035582": {
            "error_kind": "string",
            "string": "Invalid partial note"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17922298012674089187": {
            "error_kind": "string",
            "string": "Cannot complete a PartialNFTNote with a value of 0"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "finalize_transfer_to_private"
      ]
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "2952119842017946896": {
            "error_kind": "string",
            "string": "Function nft_exists can only be called statically"
          },
          "4596205382320387606": {
            "error_kind": "string",
            "string": "Function finalize_mint_private can only be called internally"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5527120278801020911": {
            "error_kind": "string",
            "string": "invalid NFT owner"
          },
          "7176719043052132708": {
            "error_kind": "string",
            "string": "Function _finish_transfer_to_public can only be called internally"
          },
          "9171385800979035582": {
            "error_kind": "string",
            "string": "Invalid partial note"
          },
          "9296579303138805202": {
            "error_kind": "string",
            "string": "token already exists"
          },
          "9443383425599897888": {
            "error_kind": "string",
            "string": "Function owner_of can only be called statically"
          },
          "9605075991997100073": {
            "error_kind": "string",
            "string": "token does not exist"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10846690067871036662": {
            "error_kind": "string",
            "string": "invalid owner"
          },
          "11988194033336150524": {
            "error_kind": "string",
            "string": "Function _store_nft_set_partial_note can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "15009911310769716579": {
            "error_kind": "string",
            "string": "Function public_get_symbol can only be called statically"
          },
          "17028138060491915576": {
            "error_kind": "string",
            "string": "Function _finalize_transfer_to_private_unsafe can only be called internally"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17922298012674089187": {
            "error_kind": "string",
            "string": "Cannot complete a PartialNFTNote with a value of 0"
          },
          "18105278452957613314": {
            "error_kind": "string",
            "string": "Function public_get_name can only be called statically"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "prepare_private_balance_increase",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "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KMViFItTLEGxJMVSFEtTLEOxLMVyFMtTrECxIsVKFCtTrEKxKsVqFKtTrEGxJsVaFGtTrEOxLsV6FOtTbECxIcVGFBtTbEKxKcVmFJtTbEGxJcVWFFtT5CjyFAWKIkWJokyxDcW2FNtRbE+xA8WOFDtR7EyxC8WuFLtR7E6xB8WeFHtR7E2xD8W+FPtR7E9xAMWBFAdRHExxyIBK3Wzq/pKopSv/BnUefaD95YP/6t7/fd3rei/WUMqdQykOozic4giKIymOojia4hiKYymOozie4gSKEylOojh5wL83RNpjOdcr9u/0lfNT6OtOpTiN4nSKMyjOpDiL4myKcyjOpTiP4nyKCygupLiI4mKKSygupbiM4nKKKyiupLiK4uoBlR829i1sA2Jio/LvqZ620zxtp3vazvC0nelpO8vTdran7RxP27metvM8bed72i7wtF3oabvI03axp+0ST9ulnrbLPG2Xe9qu8LRd6Wm7ytN2daWNk6xPkz/JZqucX0Nfey3FdRTXU9xAcSPFTRQ3UwyjuIXiVorbKG6nuIPiTorhFHdR3E0xgmIkxT0U91KMoriP4n6KBygepHiIYjTFwxSPVCfgNR4i13rarvO0Xe9pu8HTdqOn7SZP282etmGetls8bbd62m7ztN3uabvD03anp224p+0uT9vdnrYRnraRnrZ7PG33etpGedru87Td72l7wNP2oKftIU/baE/bw562RyZhMTxKX/sYxeMUT1A8SfEUxdMUz1A8S/EcxfMUL1C8SPESxcsUr1C8SvEaxesUb1C8SfEWxdsU71C8S/EexfsUH1B8SPERxcfVi+FRD5HHPG2Pe9qe8LQ96Wl7ytP2tKftGU/bs5625zxtz3vaXvC0vehpe8nT9rKn7RVP26uettc8ba972t7wtL3paXvL0/a2p+0dT9u7nrb3PG3ve9o+8LR96Gn7yNP28SQshk/oaz+l+Izic4ovKL6k+Iria4pvKL6l+I7ie4ofKH6k+IniZ4pfKH6l+I3id4o/KP6k+Ivib4oxFP9w4g+kn0vRm6KZomVgFehPPEQ+9bR95mn73NP2haftS0/bV562rz1t33javvW0fedp+97T9oOn7UdP20+etp89bb942n71tP3mafvd0/aHp+1PT9tfnra/PW1jPG3/eNo4Uarbennaenvamj1tLQMnfjG00te2UbTz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",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "random",
        "decompose_hint",
        "lte_hint",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_to_radix",
        "directive_integer_quotient"
      ],
      "verification_key": "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"
    },
    {
      "name": "constructor",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "initializer"
      ],
      "abi": {
        "parameters": [
          {
            "name": "name",
            "type": {
              "kind": "string",
              "length": 31
            },
            "visibility": "private"
          },
          {
            "name": "symbol",
            "type": {
              "kind": "string",
              "length": 31
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "constructor"
      ]
    },
    {
      "name": "transfer_in_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10846690067871036662": {
            "error_kind": "string",
            "string": "invalid owner"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBRJwAABAMnAgUEBCcCBgQAHxgABgAFgE0uCIBNAAEuCIBOAAIuCIBPAAMuCIBQAAQlAAAAVyUAAAC+KAIAAQSAUScCAgQAOw0AAQACKACAQwAAASkAgEQAR9rNcywAgEUAMGROcuExoCm4UEW2gYFYXSgz6Eh5uXCRQ+H1k/AAAAAoAIBGBAADKACARwEAACgAgEgEAAAoAIBJAAAAKACASgEAASgAgEsEAAEoAIBMBAAEJiUAAAiOHgIABQAeAgAGADM4AAUABgAHJAIABwAAAOIlAAAItx4CAAUBCjgBBQYkAgAGAAAHJCMAAAD5HgIABQEtCAEGJwIHBAIAEAEHAScDBgQBACgGAgcfJIBIgEsABwEoAAaASwAILQ0IBxwMBwgEHAwIBgAtCAEHJwIIBAUAEAEIAScDBwQBACgHAggfJIBLgEwACC0NBwgAKAgCCC0OCAcnAggALC0IAQknAgoEBgAQAQoBJwMJBAEAKAkCCi0MCgstDggLACgLAgstDggLACgLAgstDggLACgLAgstDggLACgLAgstDggLLQgBCAAAAQIBLQ4JCCcCCQQFLgiASAAEIwAAAccNKAAEgEwACiQCAAoAAAbFIwAAAdwtDQgHLQ0HCAAoCAIILQ4IBysCAAgAAAAAAAAAAAUAAAAAAAAAACcCDgQPLQgADy0MCBAAEAAOACUAAAjJLQQAAC0MEAotDBELLQwSDC0MEw0tDQoIACgIAggtDggKLQ0LCAAoCAIILQ4ICy0IAQgAAAECAS0OCggtCAEKAAABAgEtDgsKLQgBCwAAAQIBLQ4MCy0IAQwAAAECAS0ODQwuCIBIAAQjAAAChgw4BAkNJAIADQAABnsjAAACmCcCCQQNLQgADS0MCA4tDAoPLQwLEC0MDBEAEAAJACUAAAlpLQQAAC0MDgctCAEIJwIJBAQAEAEJAScDCAQBACgIAgktDAkKLQ4FCgAoCgIKLQ4GCgAoCgIKLQ4HCicCBQAtLQgBBicCBwQFABABBwEnAwYEAQAoBgIHLQwHCS0OBQkAKAkCCS0OBQkAKAkCCS0OBQkAKAkCCS0OBQktCAEFAAABAgEtDgYFLgiASAAEIwAAA00NKAAEgEYABiQCAAYAAAYZIwAAA2ItDQUGLQ0GBQAoBQIFLQ4FBisCAAUAAAAAAAAAAAQAAAAAAAAAACcCCwQMLQgADC0MBQ0AEAALACUAAAjJLQQAAC0MDQctDA4ILQwPCS0MEAotDQcFACgFAgUtDgUHLQ0IBQAoBQIFLQ4FCC0IAQUAAAECAS0OBwUtCAEHAAABAgEtDggHLQgBCAAAAQIBLQ4JCC0IAQkAAAECAS0OCgkuCIBIAAQjAAAEDA0oAASATAAKJAIACgAABc8jAAAEIScCBgQKLQgACi0MBQstDAcMLQwIDS0MCQ4AEAAGACUAAAlpLQQAAC0MCwQpAgAFACcWsWYnAgcEAycCCQQDADgHCQgtCAEGABABCAEnAwYEAQAoBgIILQ4HCAAoCAIILQ4HCCcCCAQDADgGCActDAcILQ4FCAAoCAIILQ4BCAAoCAIILQ4ECC0NBgQAKAQCBC0OBAYtCAEEJwIFBAMAEAEFAScDBAQBACgEAgUtDAUHLgqARQAHACgHAgcuCoBFAAcAKAQCBQAoBgIJLQ0JCCcCCgQCADgJCgc51QAFgEMABwAIIAIABCECAAUtCAEHACgHAgotDQoJJwILBAIAOAoLCCI0gEgABQAILQwFCScCCwQDADgJCwoAEAEKAScDBwQBACgHAgstDgkLACgLAgstDgkLLQwJBgYoBgIGLQ0HBQAoBQIFLQ4FByQCAAQAAAWUIwAABXgAKAcCCC0NCAUnAgkEAgA4CAkEPA0EBSMAAAWUCygABoBLAAQkAgAEAAAFqSUAAAndASgAB4BGAAUtDQUECygABIBEAAUkAgAFAAAFyiUAAAnvIwAABz4AKAYCCwA4CwQMLQ0MCicCCwQMLQgADC0MBQ0tDAcOLQwIDy0MCRAtDAoRABAACwAlAAAKAS0EAAABKAAEgEsACi0MCgQjAAAEDC0NBQYBKAAEgEsABwAoCAIKADgKBAstDQsJDSgAB4BMAAokAgAKAAAGSCUAAAsqLgQABoADKACABAQABSUAAAs8LgiABQAKACgKAgsAOAsHDC0OCQwtDgoFLQwHBCMAAANNACgHAg4AOA4EDy0NDw0nAg4EDy0IAA8tDAgQLQwKES0MCxItDAwTLQwNFAAQAA4AJQAACgEtBAAAASgABIBLAA0tDA0EIwAAAoYtDQgKASgABIBLAAsAKAcCDQA4DQQOLQ0ODAw4CwkNJAIADQAABvElAAALKi4EAAqAAygAgAQEAAYlAAALPC4IgAUADQAoDQIOADgOCw8tDgwPLQ4NCC0MCwQjAAABxwsoAASASQAFJAIABQAABzklAAALyiMAAAc+KwIABAAAAAAAAAAAAgAAAAAAAAAAJwIJBAotCAAKLQwECwAQAAkAJQAACMktBAAALQwLBS0MDAYtDA0HLQwOCC0NBQQAKAQCBC0OBAUtDQYEACgEAgQtDgQGLQgBBAAAAQIBLQ4FBC0IAQUAAAECAS0OBgUtCAEGAAABAgEtDgcGLQgBBwAAAQIBLQ4IBycCCAAHJwIJBAotCAAKLQwECy0MBQwtDAYNLQwHDi0MCA8AEAAJACUAAAoBLQQAACcCCAQJLQgACS0MBAotDAULLQwGDC0MBw0tDAMOABAACAAlAAAKAS0EAAAnAggECS0IAAktDAQKLQwFCy0MBgwtDAcNABAACAAlAAAJaS0EAAAtDAoDCygAA4BJAAQLKAAEgEcABSQCAAUAAAhvJQAAC9wvDAADAAQKOAQBBSQCAAUAAAiHJQAAC+4wDAACAAMmKACABAR4AA0AAACABIADJACAAwAACLYqAQABBfeh86+lrdTKPAEBAiYqAQABBb4eP/8+pPb6PAEBAiYlAAAIji0IAQInAgMEBAAQAQMBJwMCBAEAKAICAy0MAwQuCoBJAAQAKAQCBC4KgEkABAAoBAIELgqASQAELQ0CAwAoAwIDLQ4DAi0IAQMnAgQEBQAQAQQBJwMDBAEAKAMCBC0MBAUuCoBJAAUAKAUCBS4KgEkABQAoBQIFLgqASQAFACgFAgUtDgEFLQwCAS0MAwIuCIBIAAMuCIBHAAQmJQAACI4tDQQFCygABYBHAAYkAgAGAAAJiycCBwQAPAkBBycCBQQGLQgABi0MAQctDAIILQwDCS0MBAoAEAAFACUAAAwALQQAAC0NAQUtDQIGLQ0DBy0OBQEtDgYCLQ4HAy4KgEoABAEoAAaASwACLQ0CASYqAQABBQ0KLvL2wvvvPAEBAiYqAQABBUSNqimioUC3PAEBAiYlAAAIji0NAwYtDQQHCygAB4BHAAgkAgAIAAAKJycCCQQAPAkBCQsoAAaARgAHJAIABwAACrYjAAAKPC0NAQYtDQIHLQ0DCC0NBAkNKAAIgEYACiQCAAoAAAphJQAACyouBAAGgAMoAIAEBAAEJQAACzwuCIAFAAoAKAoCCwA4CwgMLQ4FDAEoAAiASwAFDjgIBQYkAgAGAAAKoSUAAA0OLQ4KAS0OBwItDgUDLQ4JBCMAAAspJwIGBActCAAHLQwBCC0MAgktDAMKLQwECwAQAAYAJQAADAAtBAAALQ0BBi0NAgctDQQILgQABoADKACABAQABCUAAAs8LgiABQAJACgJAgoBKAAKgEgACy0OBQstDgkBLQ4HAi4KgEsAAy0OCAQjAAALKSYqAQABBcVrxFoOEAACPAEBAiYuAYADgAYLAIAGAAKAByQAgAcAAAtXIwAAC2IuAIADgAUjAAALyS4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAu1LgGACoAILgKACIALAQCACgACgAoBAIALAAKACyMAAAuEKAGABQQAAQMAgAYAAoAGIwAAC8kmKgEAAQWMnRG0OfRmkDwBAQImKgEAAQUC3G4ngHYSnTwBAQImKgEAAQWWhy8mBDX09jwBAQImJQAACI4uCIBIAAUjAAAMEA0oAAWARgAGJAIABgAADHsjAAAMJS0NAQUtDQIGLQ0DBy0NBAgtCAEJJwIKBAUAEAEKAScDCQQBACgGAgonAgsEBAAoCQIMPw8ACgAMLQ0JBgAoBgIGLQ4GCS0OBQEtDgkCLQ4HAy0OCAQmLQ0DBgw4BQYHASgABYBLAAYkAgAHAAAMmSMAAA0FLQ0BBy0NAggtDQMJLQ0ECgAoCAIMADgMBQ0tDQ0LACgHAg0AOA0FDi0NDgwAOAsMDS4EAAiAAygAgAQEAAUlAAALPC4IgAUACwAoCwIMADgMBQ4tDg0OLQ4HAS0OCwItDgkDLQ4KBCMAAA0FLQwGBSMAAAwQKgEAAQVFp8pxGUHkFTwBAQIm",
      "debug_symbols": "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",
      "brillig_names": [
        "transfer_in_public"
      ]
    },
    {
      "name": "public_get_name",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "compressed_string::field_compressed_string::FieldCompressedString",
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18105278452957613314": {
            "error_kind": "string",
            "string": "Function public_get_name can only be called statically"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHxgAAgABgEQlAAAARSUAAABGLgQAAYBEKAIAAgSARCcCAwQBOw0AAgADJiUAAACbHgIAAQAeAgACADM4AAEAAgADJwIBAQEkAgADAAAAbyUAAADEHgIAAQknAgIAAQo4AQIDJAIAAwAAAIslAAAA1icCAQADLwwAAQACLQwCASYoAIAEBHgADQAAAIAEgAMkAIADAAAAwyoBAAEF96Hzr6Wt1Mo8AQECJioBAAEFvh4//z6k9vo8AQECJioBAAEF+0Le07wSjQI8AQECJg==",
      "debug_symbols": "7ZXbioMwEIbfJddeZGYyOfRVlqXY1hZBtFi7sJS++ybFqHXDupTSq96II9/4T+aQuYhdsTkf1mW9b05i9XERVbPNu7KpvXW5ZmLTllVVHtbTz0KGh+EbfzrmdTBPXd52YgWELDNR1LvwTpb9P/ZlVXhL6mv2m5eIEZcKJzQlaKU19LTSRg60gQRsWXIPW0aYwp+ZsPI54TsXcQD3wvCflH22Q/btUvaBjYm0Jvo7fMcuntVpUrPwHT07fMD78IOIfYGId3qFCkBSBX1nRDdkRQsqxvdrjxvPL1QQdRxNh5ZnFQTQ/4no/tzBD+FBvwf1SD3o51J+BCrWiUCPXiwTGSSNcYRJWztKmOR4oRnuEnTjXYLJYTRsVSyllgulNGQpwmrSXUkYgIweelFJN6+8Uu/MJDJz9dZX3pb5pir67bk/19vJMu2+j8Vsrx7bZlvszm0RNuy4XCFsJ3QZqduoeYM4I+M1vM4P",
      "brillig_names": [
        "public_get_name"
      ]
    },
    {
      "name": "transfer_in_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "length": 17,
            "item_types": []
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "11873158822563704285": {
            "error_kind": "string",
            "string": "Mismatch return note field."
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954044801249163952": {
            "error_kind": "string",
            "string": "NFT not found when transferring"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "notify_created_nullifier_oracle_wrapper",
        "get_notes_internal",
        "get_collapse_hints",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "get_public_keys_and_partial_address",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "random",
        "notify_created_note_oracle_wrapper",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "owner_of",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "9443383425599897888": {
            "error_kind": "string",
            "string": "Function owner_of can only be called statically"
          },
          "9605075991997100073": {
            "error_kind": "string",
            "string": "token does not exist"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "5V3Zbts6EP0XP/uBQ85C9lcuLoo0cQoDQRJkucBFkH+v5ESyYnOpBq4qSi9BFMzJnMNlOKTp0dvmZvfj9ef3/f3tw/Pm2z9vm7uH66uX/cN98/T2vt38eNrf3e1/fh/+eWPaH2DdAfD8eHXfPj+/XD29bL6Bs2S2m939Tfu789T8k9v93a55Mvy+Pbc31nbmBu3A2kWskRk+rZHF9NYCEWNPhj6NPVkYGv+7bfj7y/APoTMHCBPydxdqf/J9+/tS+wOJdNbsXJ5/oNCJDezwlD/CpfmD/cr/4CVM4YUw6sU23dbBLKEreJFmMH2aS2NfaF3L3cQJ1tNp61L4HUZfdbc4RiVO6U9Eh/M2imsGqOs7isJx0JGJdisfrWHQPUwfTmQCJ2EKJYH/vBNrzBROcAonYQInMIUS8BM4sRcZwuD7GGuHM75xcm5NFLoAzt7iID6EWGTtl10Rf7QVPNB3pm76vmr6yFXTJyjTZxNK9JF660Fe2DqJECKPHSM2hTxBnO+ICA5Sl6hxM7mFeyI4oP2RVliSv6BWjmptIWcm6ZIi8kcWDj/iFNuq2Vfd9vI7bQ8wZN/CvNHBKA5jPA7v4QZMtewFM4WTSZSEP+/EGTeFE5nACdgpnEyhxMIUTi4yhP/WCu+cq5o+Qt30Q9X0EydDX+kPjm+qTg8R41OFOpA1Rw/OSoxP6KVKCMdY0iy2EWsnXUfh4IDRxkythe4fWzs4uowaE3bHnIR+aHoQKSsQSXYNItfQk7yGnuQ19KTAGkSuoSf9Guak9ysQGdaQ8SSOB+oT6aE/obInIskspSezIpcyJ3MiYSHRlXtb/mrainQLGa55kQtJBrIicQ3DdSmb5qzIpWya8yLX0JO8kK1WXuQaelLWMCdlIWldVqRfQ8bjF7LVyooMuAaRVc7JhjmbKkPmgXmVK1rLHKpMOA7MqVbm1lTLvMoAemBebVSs88DlwLzaqIjVRsXEreYKmFO1UZGqjYpUZdbfMudqV3+uts2l2nHuZxxbHHQX4ayzfMZ8xuO8wHzG4zzPfM6frReYzzjjyjIXM+OMq8C81hkqptYZKjDjlajAvNo2t7VGRZnz3j/P3M34RLTAfMb70DxzrDVXFKw2KmK1M3TOVy8KzKvNFef8zYIC8xlHxSbwdSyE9MatTJlxCB0jE7j/RhuIsWcyZxy1LijTL2TQFmSGGe9ALylzxtvVUTIl9CXhPJxGWm+WEoIKMnEdMpcSafMy5/wFgkvKXMqCkpc552sel5S5jgXFraM33ToWFLeUBSW4vgROwDOZc74NckGZiSqjpvcAZlAZ7AMUEhliAYSJsmB9yg1ymnKHVNmmLMgaDYg0oESlG9+XXLHmrCESt3XwWD53WNWlA6EG5BWgxBFRAcQKkGg0eQ29RFVgwr5zSeAUlPosOwcCk9o9FVCkQaVuIBdQrEFZla9UhhP6mMTgzlCpe5sFlNegUnE+j0qUEC2hVK2RummWR7GqDRNfvXLHNcSRPUeJBuVBhSIVKmhQiQhQQmlaA4xVoVS+AFQoUqE0LZ98UwX3NeGch3NU0KASn7cWUKl3IRRQokElPikroNioUIpFua2Hp0GJVaE0vhJF6IW7lFUYzzDx1Sv0pTOD8DkmjMfE17sCRsZjEmM2m7dDqtp3AUVGhSINilW+WOVLVL5E5curfHlVfwWVr6DSlShOlEelihGXUKJBAahQPDrGuPhmtdmOdvMYI5jxccnFZ3HeDym4xTeqBYwfj4lvU/NtwONjphOFH4m3te/GwZfToE9MPBsuYBR+4vN8oCeGGT/eMH4ruYDx4zHgFJjxazTGv79ZwCj8KHIBVOQCiIr+wZHj4L15+u/qaX/14273+Xa629f768HL6l7+f9ydvLfu8enhenfz+rRr32B3fHldO2ytl60zvuXSPjJtxRxSwuYBmLdNGtr4bPz+Ag==",
      "brillig_names": [
        "owner_of"
      ]
    },
    {
      "name": "_store_nft_set_partial_note",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "partial_note",
            "type": {
              "kind": "struct",
              "path": "types::nft_note::PartialNFTNote",
              "fields": [
                {
                  "name": "commitment",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "11988194033336150524": {
            "error_kind": "string",
            "string": "Function _store_nft_set_partial_note can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgIEAScCAwQAHxgAAwACgEQuCIBEAAElAAAARSUAAABGKAIAAQSARScCAgQAOw0AAQACJiUAAACXHgIAAgAeAgADADM4AAIAAwAEJwICAQEkAgAEAAAAbyUAAADAHgIAAgEeAgADAAo4AgMEJAIABAAAAIslAAAA0icCAgABMAwAAgABJigAgAQEeAANAAAAgASAAyQAgAMAAAC/KgEAAQX3ofOvpa3UyjwBAQImKgEAAQW+Hj//PqT2+jwBAQImKgEAAQWmXp71B3Vp/DwBAQIm",
      "debug_symbols": "1VXRbsIwDPyXPPchjhPH5lemCRUIqFLVolImTYh/X4pIKV0HE2JIe6nq6ty7XO3eQa3CYr+ZF9W63qnZ20GV9TJvi7qK1eGYqUVTlGWxmQ8fK91dvDvhd9u86spdmzetmgEapzMVqlV3j+ziO9ZFGWKl6Zh9x2tjElxbM0DjBNoSwRltyese7WECzE67M5idgSH4PVOsnyNfJMEB5IXyn+S+4959vuc+OO8TmhBvyxcn6axCaEfyBZ8tH8y1/I6EX0ASm17BAjDJAiJ9m9FAd1gso00DyINt+2EAvekHkP3oCwJMn9sMFtpcbzT97UqA+Y1H1l4pOvXRY31oH+yTqT4Sl5wg8RffnJ5yQiMlJ+Lk3LbNM6aflGe54zGAZddPojM0dtnaf6v+GKuPvCnyRRnO+bbeV8tB3LWf2zBKvm1TL8Nq34QuAy/xB11+GM4QT8sQi7haSJEj8nwB",
      "brillig_names": [
        "_store_nft_set_partial_note"
      ]
    },
    {
      "name": "cancel_authwit",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "inner_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "notify_created_nullifier_oracle_wrapper"
      ],
      "verification_key": "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"
    },
    {
      "name": "finalize_mint_private",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "4596205382320387606": {
            "error_kind": "string",
            "string": "Function finalize_mint_private can only be called internally"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "9296579303138805202": {
            "error_kind": "string",
            "string": "token already exists"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "finalize_mint_private"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "NFTNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "token_id",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "NFT"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "private_nfts",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "nft_exists",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_owners",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000007"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "events": [
        {
          "fields": [
            {
              "name": "from",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "to",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "token_id",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::NFTTransfer"
        }
      ],
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::transfer_to_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::transfer_to_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "name",
                    "type": {
                      "kind": "string",
                      "length": 31
                    }
                  },
                  {
                    "name": "symbol",
                    "type": {
                      "kind": "string",
                      "length": 31
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "partial_note",
                    "type": {
                      "fields": [
                        {
                          "name": "commitment",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::nft_note::PartialNFTNote"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::_store_nft_set_partial_note_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::_store_nft_set_partial_note_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::private_get_name_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::private_get_name_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::nft_exists_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::nft_exists_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::owner_of_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::owner_of_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "partial_note",
                    "type": {
                      "fields": [
                        {
                          "name": "commitment",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::nft_note::PartialNFTNote"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::_finalize_transfer_to_private_unsafe_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::_finalize_transfer_to_private_unsafe_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::prepare_private_balance_increase_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "commitment",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "types::nft_note::PartialNFTNote"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::prepare_private_balance_increase_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::public_get_symbol_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::public_get_symbol_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::public_get_name_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::public_get_name_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "partial_note",
                    "type": {
                      "fields": [
                        {
                          "name": "commitment",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::nft_note::PartialNFTNote"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::finalize_transfer_to_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::finalize_transfer_to_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::private_get_symbol_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::private_get_symbol_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::mint_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::mint_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::transfer_in_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::transfer_in_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "inner_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::cancel_authwit_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::cancel_authwit_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::_finish_transfer_to_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::_finish_transfer_to_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::finalize_mint_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::finalize_mint_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::transfer_to_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::transfer_to_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::transfer_in_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::transfer_in_private_abi"
        }
      ]
    }
  },
  "file_map": {
    "103": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "106": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    },
    "108": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/macros/notes.nr",
      "source": "use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, &[], true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
    },
    "109": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/macros/storage.nr",
      "source": "use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "111": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr",
      "source": "use protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n"
    },
    "112": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr",
      "source": "use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash =\n            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.nonce, note_and_data.nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == first_note_and_data.nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == second_note_and_data.nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n"
    },
    "113": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log sans the extra\n            // fields) to get the complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                // temporary node connectivity issue - is simply throwing good enough here?\n                assert(\n                    deliver_note(\n                        contract_address,\n                        pending_partial_note.storage_slot,\n                        discovered_note.nonce,\n                        complete_packed_note,\n                        discovered_note.note_hash,\n                        discovered_note.inner_nullifier,\n                        log.tx_hash,\n                        pending_partial_note.recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
    },
    "115": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{\n            ComputeNoteHashAndNullifier,\n            partial_notes::process_partial_note_private_msg,\n            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n            private_notes::process_private_note_msg,\n        },\n        encoding::decode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::{\n            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n        },\n    },\n    oracle::{logs::store_private_event_log, message_discovery::sync_notes},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `syncNotes` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    sync_notes(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get the logs from the capsule array and process them one by one\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    logs.for_each(|i, log: PendingTaggedLog| {\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n        logs.remove(i);\n    });\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            pending_tagged_log.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        // In the case of events, the msg metadata is the event selector.\n        let event_selector = EventSelector::from_field(msg_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            msg_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n            pending_tagged_log.tx_index_in_block,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n"
    },
    "116": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr",
      "source": "use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n        // issue, and we should perhaps not have marked the tag index as taken.\n        assert(\n            oracle::message_discovery::deliver_note(\n                contract_address,\n                storage_slot,\n                discovered_note.nonce,\n                packed_note,\n                discovered_note.note_hash,\n                discovered_note.inner_nullifier,\n                tx_hash,\n                recipient,\n            ),\n            \"Failed to deliver note\",\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
    },
    "117": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/encoding.nr",
      "source": "// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\nglobal MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n"
    },
    "118": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr",
      "source": "use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n"
    },
    "12": {
      "path": "std/convert.nr",
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n"
    },
    "125": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/logs/note.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    messages::{\n        encoding::encode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        logs::utils::prefix_with_tag,\n        msg_type::{PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID},\n    },\n    note::{note_emission::NoteEmission, note_interface::NoteType},\n};\nuse protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\n    traits::Packable,\n};\n\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\nfn assert_note_exists<let N: u32>(context: PrivateContext, note_hash_counter: u32) {\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n}\n\npub fn compute_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PRIVATE_NOTE_MSG_TYPE_ID,\n    )\n}\n\npub fn compute_partial_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID,\n    )\n}\n\nfn compute_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    msg_type: u64,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let packed_note = note.pack();\n\n    // A note message's content is the storage slot followed by the packed note representation\n    let mut msg_content: [Field; N + 1] = std::mem::zeroed();\n    msg_content[0] = storage_slot;\n    for i in 0..packed_note.len() {\n        msg_content[1 + i] = packed_note[i];\n    }\n\n    // Notes use the note type id for metadata\n    let plaintext = encode_message(msg_type, Note::get_id() as u64, msg_content);\n\n    let ciphertext = AES128::encrypt_log(plaintext, recipient);\n\n    let log = prefix_with_tag(ciphertext, sender, recipient);\n\n    log\n}\n\npub unconstrained fn compute_note_log_unconstrained<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_note_log(note, storage_slot, recipient, sender)\n}\n\n/// Sends an encrypted message to `recipient` with the content of the note, which they will discover when processing\n/// private logs.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n        assert_note_exists(*context, note_hash_counter);\n\n        let encrypted_log = compute_note_log(note, storage_slot, recipient, sender);\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\n/// Same as `encode_and_encrypt_note`, except encryption is unconstrained. This means that the sender is free to make\n/// the log contents be whatever they wish, potentially resulting in scenarios in which the recipient is unable to\n/// decrypt and process the payload, **leading to the note being lost**.\n///\n/// Only use this function in scenarios where the recipient not receiving the note is an acceptable outcome.\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n\n        assert_note_exists(*context, note_hash_counter);\n\n        // Safety: this function does not constrain the encryption of the log, as explained on its description.\n        let encrypted_log =\n            unsafe { compute_note_log_unconstrained(note, storage_slot, recipient, sender) };\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n"
    },
    "126": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/logs/utils.nr",
      "source": "use crate::{\n    oracle::notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n    prelude::AztecAddress,\n};\n\npub(crate) fn prefix_with_tag<let L: u32>(\n    log_without_tag: [Field; L],\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> [Field; L + 1] {\n    // Safety: we assume that the sender wants for the recipient to find the tagged note, and therefore that they will\n    // cooperate and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the\n    // note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut log_with_tag = [0; L + 1];\n\n    log_with_tag[0] = tag;\n    for i in 0..log_without_tag.len() {\n        log_with_tag[i + 1] = log_without_tag[i];\n    }\n\n    log_with_tag\n}\n\nmod test {\n    use super::prefix_with_tag;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn prefixing_with_tag() {\n        let sender = AztecAddress::from_field(1);\n        let recipient = AztecAddress::from_field(2);\n\n        let app_tagging_secret = 42;\n        let index = 5;\n\n        // I am using the deserialize trait instead of directly instantiating the IndexedTaggingSecret struct because\n        // direct instantiation functionality is not exposed.\n        let indexed_tagging_secret = IndexedTaggingSecret::deserialize([app_tagging_secret, index]);\n\n        // Mock the tagging oracles\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(indexed_tagging_secret);\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let log_without_tag = [1, 2, 3];\n        let log_with_tag = prefix_with_tag(log_without_tag, sender, recipient);\n\n        let expected_result = [indexed_tagging_secret.compute_tag(recipient), 1, 2, 3];\n\n        // Check tag was prefixed correctly\n        assert_eq(log_with_tag, expected_result, \"Tag was not prefixed correctly\");\n    }\n}\n"
    },
    "131": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_interface::{NoteHash, NoteType},\n    retrieved_note::RetrievedNote,\n    utils::{compute_note_hash_for_nullify_from_read_request, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\nuse protocol_types::traits::Packable;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    let note_hash_counter = context.side_effect_counter;\n\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    let packed_note = Note::pack(note);\n    notify_created_note(\n        storage_slot,\n        Note::get_id(),\n        packed_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(note, storage_slot, note_hash_counter)\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n\n    destroy_note_unsafe(context, retrieved_note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_from_read_request(retrieved_note, note_hash_for_read_request);\n    let nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash = if retrieved_note.metadata.is_settled() {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifying so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, note_hash)\n}\n"
    },
    "133": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/note/note_emission.nr",
      "source": "/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n    pub storage_slot: Field,\n    pub note_hash_counter: u32, // a note_hash_counter of 0 means settled\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note, storage_slot: Field, note_hash_counter: u32) -> Self {\n        Self { note, storage_slot, note_hash_counter }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"
    },
    "136": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/note/note_getter.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    retrieved_note::RetrievedNote,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::{array, comparison::compare};\nuse dep::protocol_types::{\n    constants::{GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n    traits::{Packable, ToField},\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note[selector.index as u32].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[(31 + offset - i) as u32] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_packed_note<let N: u32>(packed_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (RetrievedNote<Note>, Field)\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    // Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    // is check that the metadata is correct, and that the note exists.\n    let retrieved_note = unsafe { get_note_internal::<Note, N>(storage_slot) };\n\n    // For settled notes, the contract address is implicitly checked since the hash returned from\n    // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n    // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the contract\n    // address returned from the oracle matches. Since branching in circuits is expensive, we perform this check on all\n    // note types.\n    assert(\n        retrieved_note.contract_address.eq(context.this_address()),\n        \"Note contract address mismatch.\",\n    );\n\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (retrieved_note, note_hash_for_read_request)\n}\n\n/// Returns a BoundedVec of notes that have been proven to have been created by this contract, either in the current or\n/// past transactions (i.e. pending or settled notes). A second BoundedVec contains the note hashes used for the read\n/// requests, which can save constraints when computing the note's nullifiers.\n///\n/// WARNING: recall that notes are never destroyed! Note existence therefore does not imply that the note is _current_\n/// or _valid_ - this typically requires also emitting the note's nullifier to prove that it had not been emitted\n/// before. Because of this, calling this function directly from end-user applications should be discouraged, and safe\n/// abstractions such as aztec-nr's state variables should be used instead.\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the notes (as opposed to simply removing some), the private\n    // kernel will later validate that these note actually exist, so transformations would cause for that check\n    // to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = array::collapse(filtered_notes);\n    let mut note_hashes = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_packed_note = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let retrieved_note = notes.get_unchecked(i);\n\n            // For settled notes, the contract address is implicitly checked since the hash returned from\n            // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n            // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the\n            // contract address returned from the oracle matches. Since branching in circuits is expensive, we perform\n            // this check on all note types.\n            assert(\n                retrieved_note.contract_address.eq(context.this_address()),\n                \"Note contract address mismatch.\",\n            );\n\n            let packed_note = retrieved_note.note.pack();\n            check_packed_note(packed_note, options.selects);\n            if i != 0 {\n                check_notes_order(prev_packed_note, packed_note, options.sorts);\n            }\n            prev_packed_note = packed_note;\n\n            let note_hash_for_read_request =\n                compute_note_hash_for_read_request(retrieved_note, storage_slot);\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> RetrievedNote<Note>\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let opt_notes: [_; 1] = oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_fields,\n    );\n\n    opt_notes[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\n/// Unconstrained variant of `get_notes`, meant to be used in unconstrained execution contexts. Notably only the note\n/// content is returned, and not any of the information used when proving its existence (e.g. nonce, note hash, etc.).\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteType + Packable<N> + Eq,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n\n    // We fetch the notes from the same oracle we use in the constrained case, except we don't bother inspecting the\n    // metadata in order to prove existence.\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    // Even though we don't expect for the opt_notes array to be sparse, collapse is still useful in this case to\n    // convert it into a BoundedVec.\n    array::collapse(opt_notes).map(\n        // view_notes just returns the actual note, so we drop the metadata\n        |retrieved_note| retrieved_note.note,\n    )\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects as u32] = select.unwrap_unchecked().value;\n            select_comparators[num_selects as u32] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n"
    },
    "139": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
      "source": "use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n"
    },
    "140": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr",
      "source": "use crate::note::constants::MAX_NOTES_PER_PAGE;\nuse crate::note::note_getter_options::{NoteStatus, PropertySelector, Select, Sort};\nuse crate::note::note_interface::NoteType;\nuse dep::protocol_types::traits::{Packable, ToField};\nuse std::option::Option;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    pub selects: BoundedVec<Option<Select>, N>,\n    pub sorts: BoundedVec<Option<Sort>, N>,\n    pub limit: u32,\n    pub offset: u32,\n    pub status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N>\n    where\n        Note: NoteType + Packable<N>,\n    {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE,\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T,\n    ) -> Self\n    where\n        T: ToField,\n    {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set.\n        if !dep::std::runtime::is_unconstrained() {\n            assert_constant(limit);\n        }\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n"
    },
    "142": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
    },
    "145": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "146": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
    },
    "147": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "148": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "149": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "150": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "154": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr",
      "source": "use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> PublicDataWitness {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    get_public_data_witness_oracle(block_number, public_data_tree_index)\n}\n"
    },
    "155": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n"
    },
    "156": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "157": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/logs.nr",
      "source": "use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        msg_content,\n        tx_hash,\n        log_index_in_tx,\n        tx_index_in_block,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {}\n"
    },
    "158": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr",
      "source": "use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn sync_notes(pending_tagged_log_array_base_slot: Field) {\n    sync_notes_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n"
    },
    "16": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n"
    },
    "160": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::IndexedTaggingSecret,\n    traits::{FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {\n    // This wrapper exists to extract the ORACLE_RETURN_FIELD_LENGTH generic numeric param into a value and pass it to\n    // the oracle, so that it knows how big the return array must be.\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        ORACLE_RETURN_FIELD_LENGTH,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let MAX_NOTES: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    _placeholder_fields: [Field; ORACLE_RETURN_FIELD_LENGTH], // TODO: Compute this value automatically from MAX_NOTES\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields: [_; ORACLE_RETURN_FIELD_LENGTH] = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n\n    let mut opt_notes = [Option::none(); MAX_NOTES];\n    for i in 0..opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n"
    },
    "161": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/random.nr",
      "source": "/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"
    },
    "162": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
    },
    "163": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/storage.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"
    },
    "165": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "171": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr",
      "source": "use crate::context::{PrivateContext, UtilityContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::note::retrieved_note::RetrievedNote;\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::Packable,\n};\n\nmod test;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<N> for PrivateSet<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:insert\n    pub fn insert<let N: u32>(self, note: Note) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        let (retrieved_notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < retrieved_notes.len() {\n                let retrieved_note = retrieved_notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, retrieved_note, note_hash);\n            }\n        }\n\n        // Since the notes were already destroyed, we no longer need the additional data in RetrievedNote and can\n        // discard it.\n        retrieved_notes.map(|retrieved_note| retrieved_note.note)\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, retrieved_note: RetrievedNote<Note>) {\n        let note_hash = compute_note_hash_for_read_request(retrieved_note, self.storage_slot);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, retrieved_note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note> PrivateSet<Note, UtilityContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes<let N: u32>(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\n    where\n        Note: Packable<N>,\n    {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"
    },
    "173": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr",
      "source": "use crate::{\n    context::{PrivateContext, PublicContext, UtilityContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T> PublicImmutable<T, &mut PublicContext> {\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T> PublicImmutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::utility_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T> PublicImmutable<T, &mut PrivateContext> {\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n"
    },
    "174": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",
      "source": "use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "188": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "189": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr",
      "source": "/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    // Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n"
    },
    "191": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "192": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "193": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/comparison.nr",
      "source": "struct ComparatorEnum {\n    pub EQ: u8,\n    pub NEQ: u8,\n    pub LT: u8,\n    pub LTE: u8,\n    pub GT: u8,\n    pub GTE: u8,\n}\n\npub global Comparator: ComparatorEnum =\n    ComparatorEnum { EQ: 1, NEQ: 2, LT: 3, LTE: 4, GT: 5, GTE: 6 };\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::Comparator;\n    use super::compare;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            !compare(lhs, Comparator.LTE, rhs),\n            \"Expected lhs to not be less than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n    }\n}\n"
    },
    "194": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "195": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "197": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "199": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "20": {
      "path": "std/hash/poseidon2.nr",
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "200": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/random.nr",
      "source": "use crate::oracle::random::random;\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n"
    },
    "203": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr",
      "source": "use crate::{\n    context::{PublicContext, UtilityContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn utility_public_storage_read(\n        context: UtilityContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n"
    },
    "227": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "229": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "25": {
      "path": "std/meta/expr.nr",
      "source": "//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n"
    },
    "272": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "287": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr",
      "source": "use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"
    },
    "289": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "290": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "291": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr",
      "source": "use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n"
    },
    "3": {
      "path": "std/array/mod.nr",
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n"
    },
    "300": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "304": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
    },
    "306": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "307": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "316": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize, ToField},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "327": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "341": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n"
    },
    "345": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "346": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "362": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"
    },
    "363": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "365": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "371": {
      "path": "/Users/oleh/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "373": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/compressed-string/src/field_compressed_string.nr",
      "source": "use dep::aztec::protocol_types::{\n    traits::{Deserialize, Packable, Serialize},\n    utils::field::field_from_bytes,\n};\nuse std::meta::derive;\n\n// A Fixedsize Compressed String.\n// Essentially a special version of Compressed String for practical use.\n#[derive(Deserialize, Eq, Packable, Serialize)]\npub struct FieldCompressedString {\n    value: Field,\n}\n\nimpl FieldCompressedString {\n    pub fn is_eq(self, other: FieldCompressedString) -> bool {\n        self.value == other.value\n    }\n\n    pub fn from_field(input_field: Field) -> Self {\n        Self { value: input_field }\n    }\n\n    pub fn from_string(input_string: str<31>) -> Self {\n        Self { value: field_from_bytes(input_string.as_bytes(), true) }\n    }\n\n    pub fn to_bytes(self) -> [u8; 31] {\n        self.value.to_be_bytes()\n    }\n}\n"
    },
    "42": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "5": {
      "path": "std/cmp.nr",
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"
    },
    "50": {
      "path": "/Users/oleh/Projects/zk-snacks-nft/noir/src/main.nr",
      "source": "// docs:start:imports\nmod types;\n\nuse dep::aztec::macros::aztec;\n\n// Minimal NFT implementation with `AuthWit` support that allows minting in public-only and transfers in both public\n// and private.\n#[aztec]\npub contract NFT {\n    use crate::types::nft_note::{NFTNote, PartialNFTNote};\n    use dep::authwit::auth::{\n        assert_current_call_valid_authwit, assert_current_call_valid_authwit_public,\n        compute_authwit_nullifier,\n    };\n    use dep::aztec::{\n        macros::{\n            events::event,\n            functions::{initializer, internal, private, public, utility, view},\n            storage::storage,\n        },\n        messages::logs::note::encode_and_encrypt_note,\n        note::{constants::MAX_NOTES_PER_PAGE, note_interface::NoteProperties},\n        prelude::{\n            AztecAddress, Map, NoteGetterOptions, NoteViewerOptions, PrivateContext, PrivateSet,\n            PublicContext, PublicImmutable, PublicMutable,\n        },\n        protocol_types::traits::Serialize,\n        utils::comparison::Comparator,\n    };\n    use dep::compressed_string::FieldCompressedString;\n    use aztec::protocol_types::traits::ToField;\n    use std::meta::derive;\n\n    // docs:end:imports\n\n    // TODO(#8467): Rename this to Transfer - calling this NFTTransfer to avoid export conflict with the Transfer event\n    // in the Token contract.\n    #[derive(Serialize)]\n    #[event]\n    struct NFTTransfer {\n        from: AztecAddress,\n        to: AztecAddress,\n        token_id: Field,\n    }\n\n    // docs:start:storage_struct\n    #[storage]\n    struct Storage<Context> {\n        // The symbol of the NFT\n        symbol: PublicImmutable<FieldCompressedString, Context>,\n        // The name of the NFT\n        name: PublicImmutable<FieldCompressedString, Context>,\n        // Contains the NFTs owned by each address in private.\n        private_nfts: Map<AztecAddress, PrivateSet<NFTNote, Context>, Context>,\n        // A map from token ID to a boolean indicating if the NFT exists.\n        nft_exists: Map<Field, PublicMutable<bool, Context>, Context>,\n        // A map from token ID to the public owner of the NFT.\n        public_owners: Map<Field, PublicMutable<AztecAddress, Context>, Context>,\n    }\n    // docs:end:storage_struct\n\n    // docs:start:constructor\n    #[public]\n    #[initializer]\n    fn constructor(name: str<31>, symbol: str<31>) {\n        storage.name.initialize(FieldCompressedString::from_string(name));\n        storage.symbol.initialize(FieldCompressedString::from_string(symbol));\n    }\n    // docs:end:constructor\n\n    #[private]\n    fn mint_private(to: AztecAddress, token_id: Field) {\n        assert(token_id != 0, \"zero token ID not supported\");\n        let note = NFTNote::new(token_id, to);\n        storage.private_nfts.at(to).insert(note).emit(encode_and_encrypt_note(&mut context, to, to));\n    }\n\n    #[public]\n    #[internal]\n    fn finalize_mint_private(token_id: Field) {\n        assert(storage.nft_exists.at(token_id).read() == false, \"token already exists\");\n        storage.nft_exists.at(token_id).write(true);\n    }\n\n    #[public]\n    #[view]\n    fn public_get_name() -> pub FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_name() -> pub FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    // docs:start:transfer_in_public\n    #[public]\n    fn transfer_in_public(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let public_owners_storage = storage.public_owners.at(token_id);\n        assert(public_owners_storage.read().eq(from), \"invalid owner\");\n\n        public_owners_storage.write(to);\n    }\n    // docs:end:transfer_in_public\n\n    // Transfers token with `token_id` from public balance of message sender to a private balance of `to`.\n    // docs:start:transfer_to_private\n    #[private]\n    fn transfer_to_private(to: AztecAddress, token_id: Field) {\n        let from = context.msg_sender();\n\n        let nft = NFT::at(context.this_address());\n\n        // We prepare the private balance increase.\n        let partial_note = _prepare_private_balance_increase(to, &mut context, storage);\n\n        // At last we finalize the transfer. Usage of the `unsafe` method here is safe because we set the `from`\n        // function argument to a message sender, guaranteeing that he can transfer only his own NFTs.\n        nft._finalize_transfer_to_private_unsafe(from, token_id, partial_note).enqueue(&mut context);\n    }\n    // docs:end:transfer_to_private\n\n    /// Prepares an increase of private balance of `to` (partial note). The increase needs to be finalized by calling\n    /// `finalize_transfer_to_private` with the returned partial note.\n    // docs:start:prepare_private_balance_increase\n    #[private]\n    fn prepare_private_balance_increase(to: AztecAddress) -> PartialNFTNote {\n        _prepare_private_balance_increase(to, &mut context, storage)\n    }\n\n    /// This function exists separately from `prepare_private_balance_increase` solely as an optimization as it allows\n    /// us to have it inlined in the `transfer_to_private` function which results in one less kernel iteration.\n    ///\n    /// TODO(#9180): Consider adding macro support for functions callable both as an entrypoint and as an internal\n    /// function.\n    #[contract_library_method]\n    fn _prepare_private_balance_increase(\n        to: AztecAddress,\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n    ) -> PartialNFTNote {\n        // We create a partial note with unpopulated/zero token id for 'to'\n        let partial_note = NFTNote::partial(\n            to,\n            storage.private_nfts.at(to).storage_slot,\n            context,\n            to,\n            context.msg_sender(),\n        );\n\n        NFT::at(context.this_address())._store_nft_set_partial_note(partial_note).enqueue(context);\n\n        partial_note\n    }\n    // docs:end:prepare_private_balance_increase\n\n    // docs:start:store_payload_in_transient_storage_unsafe\n    #[public]\n    #[internal]\n    fn _store_nft_set_partial_note(partial_note: PartialNFTNote) {\n        // We store the partial note in a slot equal to its commitment. This is safe because the commitment is computed\n        // using a generator different from the one used to compute storage slots, so there can be no collisions.\n        // We could consider storing all pending partial notes in e.g. some array, but ultimately this is pointless: all\n        // we need to verify is that the note is valid.\n        context.storage_write(partial_note.commitment(), true);\n    }\n    // docs:end:store_payload_in_transient_storage_unsafe\n    /// Finalizes a transfer of NFT with `token_id` from public balance of `from` to a private balance of `to`.\n    /// The transfer must be prepared by calling `prepare_private_balance_increase` first and the resulting\n    /// `partial_note` must be passed as an argument to this function.\n    // docs:start:finalize_transfer_to_private\n    #[public]\n    fn finalize_transfer_to_private(token_id: Field, partial_note: PartialNFTNote) {\n        let from = context.msg_sender();\n        _finalize_transfer_to_private(from, token_id, partial_note, &mut context, storage);\n    }\n    // docs:end:finalize_transfer_to_private\n\n    // docs:start:finalize_transfer_to_private_unsafe\n    #[public]\n    #[internal]\n    fn _finalize_transfer_to_private_unsafe(\n        from: AztecAddress,\n        token_id: Field,\n        partial_note: PartialNFTNote,\n    ) {\n        _finalize_transfer_to_private(from, token_id, partial_note, &mut context, storage);\n    }\n    // docs:end:finalize_transfer_to_private_unsafe\n\n    #[contract_library_method]\n    fn _finalize_transfer_to_private(\n        from: AztecAddress,\n        token_id: Field,\n        partial_note: PartialNFTNote,\n        context: &mut PublicContext,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        let public_owners_storage = storage.public_owners.at(token_id);\n        assert(public_owners_storage.read().eq(from), \"invalid NFT owner\");\n\n        // Set the public NFT owner to zero\n        public_owners_storage.write(AztecAddress::zero());\n\n        // We verify that the partial note we're completing is valid (i.e. it uses the correct state variable's storage\n        // slot, and it is internally consistent). We *could* clear the storage since each partial note should only be\n        // used once, but since the AVM offers no gas refunds for doing so this would just make the transaction be more\n        // expensive.\n        assert(context.storage_read(partial_note.commitment()), \"Invalid partial note\");\n        partial_note.complete(token_id, context);\n    }\n\n    /**\n     * Cancel a private authentication witness.\n     * @param inner_hash The inner hash of the authwit to cancel.\n     */\n    // docs:start:cancel_authwit\n    #[private]\n    fn cancel_authwit(inner_hash: Field) {\n        let on_behalf_of = context.msg_sender();\n        let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n        context.push_nullifier(nullifier);\n    }\n    // docs:end:cancel_authwit\n\n    // docs:start:transfer_in_private\n    #[private]\n    fn transfer_in_private(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let nfts = storage.private_nfts;\n\n        let notes = nfts.at(from).pop_notes(NoteGetterOptions::new()\n            .select(NFTNote::properties().token_id, Comparator.EQ, token_id)\n            .set_limit(1));\n        assert(notes.len() == 1, \"NFT not found when transferring\");\n\n        let new_note = NFTNote::new(token_id, to);\n\n        nfts.at(to).insert(new_note).emit(encode_and_encrypt_note(&mut context, to, from));\n    }\n    // docs:end:transfer_in_private\n\n    // docs:start:transfer_to_public\n    #[private]\n    fn transfer_to_public(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let notes = storage.private_nfts.at(from).pop_notes(NoteGetterOptions::new()\n            .select(NFTNote::properties().token_id, Comparator.EQ, token_id)\n            .set_limit(1));\n        assert(notes.len() == 1, \"NFT not found when transferring to public\");\n\n        NFT::at(context.this_address())._finish_transfer_to_public(to, token_id).enqueue(\n            &mut context,\n        );\n    }\n    // docs:end:transfer_to_public\n\n    // docs:start:finish_transfer_to_public\n    #[public]\n    #[internal]\n    fn _finish_transfer_to_public(to: AztecAddress, token_id: Field) {\n        storage.public_owners.at(token_id).write(to);\n    }\n    // docs:end:finish_transfer_to_public\n\n    // Returns zero address when the token does not have a public owner. Reverts if the token does not exist.\n    #[public]\n    #[view]\n    fn owner_of(token_id: Field) -> AztecAddress {\n        assert(storage.nft_exists.at(token_id).read(), \"token does not exist\");\n        storage.public_owners.at(token_id).read()\n    }\n\n    #[public]\n    #[view]\n    fn nft_exists(token_id: Field) -> bool {\n        storage.nft_exists.at(token_id).read()\n    }\n\n    /// Returns an array of token IDs owned by `owner` in private and a flag indicating whether a page limit was\n    /// reached. Starts getting the notes from page with index `page_index`. Zero values in the array are placeholder\n    /// values for non-existing notes.\n    // docs:start:get_private_nfts\n    #[utility]\n    unconstrained fn get_private_nfts(\n        owner: AztecAddress,\n        page_index: u32,\n    ) -> ([Field; MAX_NOTES_PER_PAGE], bool) {\n        let offset = page_index * MAX_NOTES_PER_PAGE;\n        let mut options = NoteViewerOptions::new();\n        let notes = storage.private_nfts.at(owner).view_notes(options.set_offset(offset));\n\n        let mut owned_nft_ids = [0; MAX_NOTES_PER_PAGE];\n        for i in 0..options.limit {\n            if i < notes.len() {\n                owned_nft_ids[i] = notes.get_unchecked(i).token_id;\n            }\n        }\n\n        let page_limit_reached = notes.len() == options.limit;\n        (owned_nft_ids, page_limit_reached)\n    }\n    // docs:end:get_private_nfts\n}\n"
    },
    "51": {
      "path": "/Users/oleh/Projects/zk-snacks-nft/noir/src/types/nft_note.nr",
      "source": "use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER},\n        hash::poseidon2_hash_with_separator,\n        traits::{Deserialize, Hash, Packable, Serialize},\n        utils::arrays::array_concat,\n    },\n};\n\n// NFTNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the token id).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n// docs:start:nft_note\n/// A private note representing a token id associated to an account.\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct NFTNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of NFTPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The ID of the token represented by this note.\n    token_id: Field,\n}\n// docs:end:nft_note\n\nimpl NoteHash for NFTNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because NFTNote has just one variant (where the token id is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            NFTPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note =\n            PartialNFTNote { commitment: private_content.compute_partial_commitment(storage_slot) };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.token_id)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl NFTNote {\n    pub fn new(token_id: Field, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { token_id, owner, randomness }\n    }\n\n    pub fn get_token_id(self) -> Field {\n        self.token_id\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the token id, since the note will be\n    /// later completed in public. This is a powerful technique for scenarios in which the token id cannot be known in\n    /// private (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// The returned `PartialNFTNote` value must be sent to public execution via a secure channel, since it is not\n    /// possible to verify the integrity of its contents due to it hiding information. The recommended ways to do this\n    /// are to retrieve it from public storage, or to receive it in an internal public function call.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n    ) -> PartialNFTNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = NFTPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateNFTPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient, sender);\n        context.emit_private_log(encrypted_log);\n\n        PartialNFTNote { commitment }\n    }\n}\n\n/// The private content of a partial NFTNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct NFTPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of NFTNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NFTPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateNFTPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of NFTNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateNFTPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        NFTNote::get_id()\n    }\n}\n\n/// A partial instance of a NFTNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the token id field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the token id to the public), resulting in a NFTNote that can be used like any other one (except\n/// of course that its token id is known).\n#[derive(Packable, Serialize, Deserialize)]\npub struct PartialNFTNote {\n    commitment: Field,\n}\n\nimpl PartialNFTNote {\n    pub fn commitment(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl PartialNFTNote {\n    /// Completes the partial note, creating a new note that can be used like any other NFTNote.\n    pub fn complete(self, token_id: Field, context: &mut PublicContext) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(token_id != 0, \"Cannot complete a PartialNFTNote with a value of 0\");\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the token id). The contract will later find it by\n        //  searching for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(token_id));\n        context.push_note_hash(self.compute_complete_note_hash(token_id));\n    }\n\n    fn compute_note_completion_log(self, token_id: Field) -> [Field; 2] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, token_id]\n    }\n\n    fn compute_complete_note_hash(self, token_id: Field) -> Field {\n        // Here we finalize the note hash by including the (public) token id into the partial note commitment. Note that\n        // we use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator([self.commitment, token_id], GENERATOR_INDEX__NOTE_HASH)\n    }\n}\n\nmod test {\n    use super::{\n        NFTNote, NFTPartialNotePrivateContent, PartialNFTNote,\n        PrivateNFTPartialNotePrivateLogContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global token_id: Field = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a NFTNote has the same note hash as a PartialNFTNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = NFTNote { token_id, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = NFTPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialNFTNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(token_id);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular NFTNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular NFTNote.\n\n        let note = NFTNote { token_id, randomness, owner };\n\n        let partial_note_private_content = NFTPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateNFTPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialNFTNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(token_id)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in NFTNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(token_id), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n"
    },
    "54": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/authwit/src/auth.nr",
      "source": "use dep::aztec::{context::{gas::GasOpts, PrivateContext, PublicContext}, hash::hash_args_array};\nuse dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::{\n        CANONICAL_AUTH_REGISTRY_ADDRESS, GENERATOR_INDEX__AUTHWIT_INNER,\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER, GENERATOR_INDEX__AUTHWIT_OUTER,\n    },\n    hash::poseidon2_hash_with_separator,\n    traits::ToField,\n};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\npub global IS_VALID_SELECTOR: Field = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` has authorized the current call with a valid authentication witness\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([\n        context.msg_sender().to_field(),\n        context.selector().to_field(),\n        context.args_hash,\n    ]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context\n        .static_call_private_function(\n            on_behalf_of,\n            comptime { FunctionSelector::from_signature(\"verify_private_authwit(Field)\") },\n            [inner_hash],\n        )\n        .get_preimage();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allows the same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` has authorized the current call in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub unconstrained fn assert_current_call_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n) {\n    let inner_hash = compute_inner_authwit_hash([\n        (*context).msg_sender().to_field(),\n        (*context).selector().to_field(),\n        (*context).get_args_hash(),\n    ]);\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` has authorized a specific `inner_hash` in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the `inner_hash`\n */\npub unconstrained fn assert_inner_hash_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    let results: [Field] = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"consume((Field),Field)\") },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default(),\n    );\n    assert(results.len() == 1, \"Invalid response from registry\");\n    assert(results[0] == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N],\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash =\n        compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computes the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that has authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [consumer.to_field(), chain_id, version, inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER,\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub unconstrained fn set_authorized(\n    context: &mut PublicContext,\n    message_hash: Field,\n    authorize: bool,\n) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_authorized(Field,bool)\") },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub unconstrained fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_reject_all(bool)\") },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "62": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n"
    },
    "63": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static: true }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n"
    },
    "70": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "71": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "72": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n"
    },
    "73": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "77": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "89": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/history/public_storage.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\nuse protocol_types::traits::{Hash, ToField};\n\nmod test;\n\npub trait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        // Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n"
    },
    "92": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr",
      "source": "use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::{embedded_curve_ops::multi_scalar_mul, ops::Neg};\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n"
    },
    "93": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr",
      "source": "use std::embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // Safety: we use the randomness to preserve the privacy of both the sender and recipient via encryption, so a\n    // malicious sender could use non-random values to reveal the plaintext. But they already know it themselves anyway,\n    // and so the recipient already trusts them to not disclose this information. We can therefore assume that the\n    // sender will cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // TODO(#12757): compute the key pair without constraining eph_sk twice (once in from_field, once in the black box\n    // called by fixed_base_scalar_mul).\n    let eph_sk = EmbeddedCurveScalar::from_field(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n"
    },
    "94": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    },
    "98": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
      "source": "use crate::{\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_notes` utility function PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    // TODO(https://github.com/noir-lang/noir/issues/7912): Doing the following unfortunately doesn't work. Once\n    // the issue is fixed uncomment the following and remove the workaround from TS (look for the issue link in the\n    // codebase).\n    // let utility: fn(FunctionDefinition) -> () = crate::macros::functions::utility;\n    // quote {\n    //     #[$utility]\n    //     unconstrained fn sync_notes() {\n    //     }\n    // }\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[aztec::macros::functions::utility]\n        unconstrained fn sync_notes() { }\n    }\n}\n"
    },
    "99": {
      "path": "/Users/oleh/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    }
  }
}
